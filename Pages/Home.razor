@page "/"

@inject HttpClient Http
@inject Albatross.Services.AbuseIPDBService AbuseIPDBService
@using System.Text.Json
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<!-- External CSS and JS references -->
<link rel="stylesheet" href="css/json-formatter.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/vs2015.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/json.min.js"></script>
<script src="js/json-highlight.js"></script>

<center>

<!-- 
<pre><b>
   ________                __   ________     _____                      __  
  / ____/ /___  __  ______/ /  /  _/ __ \   / ___/___  ____ ___________/ /_ 
 / /   / / __ \/ / / / __  /   / // /_/ /   \__ \/ _ \/ __ `/ ___/ ___/ __ \
/ /___/ / /_/ / /_/ / /_/ /  _/ // ____/   ___/ /  __/ /_/ / /  / /__/ / / /
\____/_/\____/\__,_/\__,_/  /___/_/       /____/\___/\__,_/_/   \___/_/ /_/ 
</b></pre><br>
-->

<img src="/images/ascii-text-art.png" alt="CloudIPSearch" width=30% border="0" /> <br><br>
<img src="/images/ascii-art.png" alt="Albatross" width=50% border="0" /> <br><br>

<input @bind="ipAddress" placeholder="Enter IP address..." />
<button class="btn btn-primary" @onclick="ValidateAndSearchAsync" disabled="@isSearching">Search</button>
<button class="btn btn-info" @onclick="ToggleDescription" style="margin-left: 10px;">
    <span class="oi oi-info"></span> About
</button>
<button class="btn btn-warning" @onclick="CheckAbuseIPDBAsync" disabled="@isCheckingAbuse" style="margin-left: 10px;">
    <span class="oi oi-shield"></span> Check IP Reputation
</button>
<br><br>

@if (showDescription)
{
    <div class="description-panel">
        <div class="card">
            <div class="card-header">
                <h4>About Cloud IP Search</h4>
                <button class="btn btn-sm btn-close" @onclick="ToggleDescription"></button>
            </div>
            <div class="card-body">
                <p>Cloud IP Search helps you identify which cloud service providers own specific IP addresses.</p>
                <p>Enter any IPv4 or IPv6 address to see if it belongs to Microsoft Azure, AWS, or Google Cloud Platform services.</p>
                <p>The tool searches through official IP range manifests to match your query with known cloud infrastructure.</p>
                <p>You can also check IP reputation via AbuseIPDB to identify potentially malicious IP addresses.</p>
            </div>
        </div>
    </div>
}

@if (azureMatchedServices != null && azureMatchedServices.Any())
{
    <div class="results">
        <h3>Matching Azure Services:</h3>
        <div>
            @foreach (var service in azureMatchedServices)
            {
                <div>@service</div>
            }
        </div>
    </div>
}

@if (awsMatchedServices != null && awsMatchedServices.Any())
{
    <div class="results">
        <h3>Matching AWS Services:</h3>
        <div>
            @foreach (var service in awsMatchedServices)
            {
                <div>@service</div>
            }
        </div>
    </div>
}

@if (gcpMatchedServices != null && gcpMatchedServices.Any())
{
    <div class="results">
        <h3>Matching GCP Services:</h3>
        <div>
            @foreach (var service in gcpMatchedServices)
            {
                <div>@service</div>
            }
        </div>
    </div>
}

@if (isSearching || isCheckingAbuse)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <p>@(isCheckingAbuse ? "Checking IP reputation..." : "Searching IP ranges...")</p>
}

<p role="status">@statusMessage</p>

@if (abuseIpResult != null)
{
    <div class="results mt-4 card-container">
        <h3>IP Reputation Results for @(abuseIpResult.Data?.IpAddress ?? ipAddress)</h3>
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>AbuseIPDB JSON Response</h5>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleJsonDisplay">
                    @(showJson ? "Hide JSON" : "Show JSON")
                </button>
            </div>
            @if (showJson)
            {
                <div class="card-body">
                    <pre class="bg-dark text-light p-3 rounded json-output" id="jsonOutput">@formattedJson</pre>
                </div>
            }
        </div>
    </div>
}

</center>

@code {
    private string ipAddress = string.Empty;
    private string statusMessage = string.Empty;
    private List<string>? azureMatchedServices;
    private List<string>? awsMatchedServices;
    private List<string>? gcpMatchedServices;
    private bool isSearching = false;
    private bool showDescription = false;
    private bool isCheckingAbuse = false;
    private bool showJson = true; // Default to showing JSON
    private string formattedJson = string.Empty;
    private Albatross.Services.AbuseIPDBApiResponse abuseIpResult;
    
    // Called when component is initialized
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    
    // Called after the component has rendered
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!string.IsNullOrEmpty(formattedJson) && showJson)
        {
            await ApplyJsonHighlighting();
        }
    }
    
    // Method to apply syntax highlighting to JSON
    private async Task ApplyJsonHighlighting()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("highlightJson");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error highlighting JSON: {ex.Message}");
        }
    }

    private void ToggleDescription()
    {
        showDescription = !showDescription;
    }
    
    private async void ToggleJsonDisplay()
    {
        showJson = !showJson;
        
        // When toggling to show the JSON, apply highlighting after render
        if (showJson && !string.IsNullOrEmpty(formattedJson))
        {
            StateHasChanged();
            await Task.Delay(50); // Small delay to ensure rendering completes
            await ApplyJsonHighlighting();
        }
    }

    private async Task ValidateAndSearchAsync()
    {
        await ValidateAndSearch();
    }

    private async Task CheckAbuseIPDBAsync()
    {
        if (!IsValidIPAddress(ipAddress))
        {
            statusMessage = "Invalid IP address. Please enter a valid IPv4 or IPv6 address.";
            return;
        }

        isCheckingAbuse = true;
        statusMessage = string.Empty;
        abuseIpResult = null;
        formattedJson = string.Empty;
        StateHasChanged();

        try
        {
            // Log to browser console for debugging
            await JSRuntime.InvokeVoidAsync("console.log", "Checking IP: " + ipAddress);
            
            abuseIpResult = await AbuseIPDBService.CheckIPAsync(ipAddress, 30, true);
            
            // Format the JSON for display
            var options = new JsonSerializerOptions { WriteIndented = true };
            formattedJson = JsonSerializer.Serialize(abuseIpResult, options);
            
            // Log the JSON to browser console
            await JSRuntime.InvokeVoidAsync("console.log", "Response JSON: " + formattedJson);
            
            // Debug check
            if (string.IsNullOrEmpty(formattedJson))
            {
                formattedJson = "No data returned from API.";
            }
            
            statusMessage = "IP reputation check completed.";
            
            // Force UI update
            StateHasChanged();
            
            // Apply syntax highlighting after the component has rendered
            await Task.Delay(50); // Small delay to ensure rendering completes
            await ApplyJsonHighlighting();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error: " + ex.Message);
            statusMessage = $"Error checking IP reputation: {ex.Message}";
            formattedJson = $"Error: {ex.Message}";
        }
        finally
        {
            isCheckingAbuse = false;
        }
    }

    private async Task ValidateAndSearch()
    {
        azureMatchedServices = null;
        awsMatchedServices = null;
        gcpMatchedServices = null;

        if (!IsValidIPAddress(ipAddress))
        {
            statusMessage = "Invalid IP address. Please enter a valid IPv4 or IPv6 address.";
            return;
        }

        isSearching = true;
        statusMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Parse the entered IP address
            IPAddress enteredIp = IPAddress.Parse(ipAddress);
            bool foundMatch = false;

            // Search Azure IP ranges
            string azureJsonContent = await Http.GetStringAsync("ip-manifests/Azure.json");
            var azureData = JsonSerializer.Deserialize<AzureIpRanges>(azureJsonContent);

            if (azureData?.values != null)
            {
                // Find matching Azure services
                azureMatchedServices = new List<string>();
                foreach (var value in azureData.values)
                {
                    if (value.properties != null && value.properties.addressPrefixes != null)
                    {
                        foreach (var prefix in value.properties.addressPrefixes)
                        {
                            if (IsIpInRange(enteredIp, prefix) && !string.IsNullOrEmpty(value.name))
                            {
                                azureMatchedServices.Add(value.name);
                                foundMatch = true;
                                break;
                            }
                        }
                    }
                }
            }

            // Search AWS IP ranges
            string awsJsonContent = await Http.GetStringAsync("ip-manifests/AWS.json");
            var awsData = JsonSerializer.Deserialize<AwsIpRanges>(awsJsonContent);

            if (awsData?.prefixes != null)
            {
                // Find matching AWS services
                awsMatchedServices = new List<string>();
                foreach (var prefix in awsData.prefixes)
                {
                    if (!string.IsNullOrEmpty(prefix.ip_prefix) && !string.IsNullOrEmpty(prefix.service))
                    {
                        if (IsIpInRange(enteredIp, prefix.ip_prefix))
                        {
                            string serviceInfo = $"{prefix.service} ({prefix.region})";
                            if (!awsMatchedServices.Contains(serviceInfo))
                            {
                                awsMatchedServices.Add(serviceInfo);
                                foundMatch = true;
                            }
                        }
                    }
                }
            }

            // Search GCP IP ranges
            string gcpJsonContent = await Http.GetStringAsync("ip-manifests/GCP.json");
            var gcpData = JsonSerializer.Deserialize<GcpIpRanges>(gcpJsonContent);

            if (gcpData?.prefixes != null)
            {
                // Find matching GCP services
                gcpMatchedServices = new List<string>();
                foreach (var prefix in gcpData.prefixes)
                {
                    string ipRange = prefix.ipv4Prefix ?? prefix.ipv6Prefix;
                    if (!string.IsNullOrEmpty(ipRange) && !string.IsNullOrEmpty(prefix.service))
                    {
                        if (IsIpInRange(enteredIp, ipRange))
                        {
                            string serviceInfo = $"{prefix.service} ({prefix.scope})";
                            if (!gcpMatchedServices.Contains(serviceInfo))
                            {
                                gcpMatchedServices.Add(serviceInfo);
                                foundMatch = true;
                            }
                        }
                    }
                }
            }

            if (foundMatch)
            {
                statusMessage = "Found matching cloud services!";
            }
            else
            {
                statusMessage = "No matching cloud services found for this IP address.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error during search: {ex.Message}";
        }
        finally
        {
            isSearching = false;
        }
    }

    private bool IsValidIPAddress(string ip)
    {
        return IPAddress.TryParse(ip, out _);
    }

    private bool IsIpInRange(IPAddress ip, string cidrRange)
    {
        try
        {
            // Split CIDR range into IP and prefix length
            string[] parts = cidrRange.Split('/');
            if (parts.Length != 2)
                return false;

            IPAddress networkAddress = IPAddress.Parse(parts[0]);
            int prefixLength = int.Parse(parts[1]);

            // Convert IP addresses to bytes for comparison
            byte[] ipBytes = ip.GetAddressBytes();
            byte[] networkBytes = networkAddress.GetAddressBytes();

            if (ipBytes.Length != networkBytes.Length)
                return false; // Different IP versions

            // Compare the network portions
            int numBytes = prefixLength / 8;
            int remainingBits = prefixLength % 8;

            // Compare full bytes
            for (int i = 0; i < numBytes && i < ipBytes.Length; i++)
            {
                if (ipBytes[i] != networkBytes[i])
                    return false;
            }

            // Compare remaining bits if any
            if (remainingBits > 0 && numBytes < ipBytes.Length)
            {
                int mask = 0xFF << (8 - remainingBits);
                if ((ipBytes[numBytes] & mask) != (networkBytes[numBytes] & mask))
                    return false;
            }

            return true;
        }
        catch
        {
            return false;
        }
    }

    private string GetScoreClass(int score)
    {
        if (score < 25) return "text-success";
        if (score < 75) return "text-warning";
        return "text-danger";
    }

    private class AzureIpRanges
    {
        public int changeNumber { get; set; }
        public string? cloud { get; set; }
        public List<AzureService>? values { get; set; }
    }

    private class AzureService
    {
        public string? name { get; set; }
        public string? id { get; set; }
        public ServiceProperties? properties { get; set; }
    }

    private class ServiceProperties
    {
        public string[]? addressPrefixes { get; set; }
        public string[]? networkFeatures { get; set; }
        public string[]? platformFeatures { get; set; }
        public string? systemService { get; set; }
    }

    private class AwsIpRanges
    {
        public string? syncToken { get; set; }
        public string? createDate { get; set; }
        public List<AwsPrefix>? prefixes { get; set; }
        public List<AwsPrefix>? ipv6_prefixes { get; set; }
    }

    private class AwsPrefix
    {
        public string? ip_prefix { get; set; }
        public string? region { get; set; }
        public string? service { get; set; }
        public string? network_border_group { get; set; }
    }

    private class GcpIpRanges
    {
        public string? syncToken { get; set; }
        public string? creationTime { get; set; }
        public List<GcpPrefix>? prefixes { get; set; }
    }

    private class GcpPrefix
    {
        public string? ipv4Prefix { get; set; }
        public string? ipv6Prefix { get; set; }
        public string? service { get; set; }
        public string? scope { get; set; }
    }
}