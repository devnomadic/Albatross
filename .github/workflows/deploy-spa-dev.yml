# Deploy Blazor SPA to Development/Preview
name: Deploy SPA Dev

on:
  push:
    paths:
      - '**/*.cs'
      - '**/*.razor'
      - '**/*.csproj'
      - 'wwwroot/**'
      - '!cloudflare-worker.js'
    branches: [ develop, dev, feature/*, fix/* ]
  pull_request:
    paths:
      - '**/*.cs'
      - '**/*.razor'
      - '**/*.csproj'
      - 'wwwroot/**'
      - '!cloudflare-worker.js'
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'cloudflare-pages-preview'
        type: choice
        options:
          - cloudflare-pages-preview
          - github-pages-preview

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    name: Build Blazor App for Preview
    runs-on: ubuntu-latest
    
    outputs:
      build-version: ${{ steps.version.outputs.version }}
      preview-name: ${{ steps.preview.outputs.name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Generate Preview Name
      id: preview
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          PREVIEW_NAME="pr-${{ github.event.number }}"
        else
          BRANCH_NAME="${{ github.ref_name }}"
          PREVIEW_NAME=$(echo "${BRANCH_NAME}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]' | cut -c1-32)
        fi
        echo "name=${PREVIEW_NAME}" >> $GITHUB_OUTPUT
        echo "Preview name: ${PREVIEW_NAME}"
        
    - name: Generate Version
      id: version
      run: |
        VERSION="${{ github.sha }}-dev"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Build version: ${VERSION}"
        
    - name: Generate Authentication Key
      shell: pwsh
      run: |
        ./Generate-AuthKey.ps1 -OutputPath "Generated" -Verbose
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build application
      run: |
        dotnet build --configuration Release --no-restore
        
    - name: Publish application
      run: |
        dotnet publish --configuration Release --no-build --output ./dist
        
    - name: Update base href for preview
      run: |
        # Update base href for preview deployment
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          sed -i 's|<base href="/" />|<base href="/pr-${{ github.event.number }}/" />|g' ./dist/wwwroot/index.html
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: blazor-app-${{ steps.preview.outputs.name }}
        path: ./dist/wwwroot/
        retention-days: 7

  deploy-cloudflare-preview:
    name: Deploy to Cloudflare Pages Preview
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_target == 'cloudflare-pages-preview' || github.event.inputs.deploy_target == '' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: blazor-app-${{ needs.build.outputs.preview-name }}
        path: ./dist
        
    - name: Deploy to Cloudflare Pages Preview
      id: deploy
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
        directory: ./dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        wranglerVersion: '3'
        
    - name: Update PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('üåê SPA Preview')
          );
          
          const deploymentUrl = '${{ steps.deploy.outputs.url }}' || 'https://${{ needs.build.outputs.preview-name }}.${{ secrets.CLOUDFLARE_PROJECT_NAME }}.pages.dev';
          
          const commentBody = `## üåê SPA Preview Deployment
          
          **Preview URL:** ${deploymentUrl}
          **Environment:** Development/Preview
          **Branch:** \`${{ github.head_ref }}\`
          **Commit:** \`${{ github.sha }}\`
          **Build Version:** \`${{ needs.build.outputs.build-version }}\`
          
          ### üîó Related Links
          - **Worker Preview:** https://albatross-worker-pr-${{ github.event.number }}.preview.workers.dev
          - **Full App:** ${deploymentUrl}
          
          This preview will be automatically updated with new commits to the PR.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
          
    - name: Deployment Summary
      run: |
        echo "## üöÄ SPA Preview Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- **Preview Name:** ${{ needs.build.outputs.preview-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Preview URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Development/Preview" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Version:** ${{ needs.build.outputs.build-version }}" >> $GITHUB_STEP_SUMMARY

  deploy-github-preview:
    name: Deploy to GitHub Pages Preview
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_target == 'github-pages-preview'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: blazor-app-${{ needs.build.outputs.preview-name }}
        path: ./dist
        
    - name: Deploy to GitHub Pages (Preview Branch)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        publish_branch: gh-pages-preview-${{ needs.build.outputs.preview-name }}
        force_orphan: true
        
    - name: Update PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('üåê SPA Preview')
          );
          
          const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}/`;
          
          const commentBody = `## üåê SPA Preview Deployment (GitHub Pages)
          
          **Preview URL:** ${previewUrl}
          **Environment:** Development/Preview
          **Branch:** \`${{ github.head_ref }}\`
          **Commit:** \`${{ github.sha }}\`
          **Build Version:** \`${{ needs.build.outputs.build-version }}\`
          
          This preview is deployed to GitHub Pages and will be available shortly.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
