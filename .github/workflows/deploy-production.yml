# Deploy Albatross to Production (SPA + Worker)
name: Deploy Production

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      deploy_spa:
        description: 'Deploy SPA'
        required: false
        default: true
        type: boolean
      deploy_worker:
        description: 'Deploy Worker'
        required: false
        default: true
        type: boolean
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    name: Build and Deploy Albatross to Production
    runs-on: ubuntu-latest
    
    outputs:
      spa-url: ${{ steps.spa-deploy.outputs.url }}
      worker-url: ${{ steps.worker-deploy.outputs.url }}
      version: ${{ steps.version.outputs.version }}
      build-timestamp: ${{ steps.version.outputs.build-timestamp }}
      build-id: ${{ steps.version.outputs.build-id }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install npm dependencies
      run: npm ci
      
    - name: Generate Version
      id: version
      run: |
        # Generate build timestamp in the same format as the app (yyyyMMdd-HHmm)
        BUILD_TIMESTAMP=$(date -u +"%Y%m%d-%H%M")
        BUILD_ID=$(echo "${{ github.sha }}" | cut -c1-8)
        VERSION="${BUILD_TIMESTAMP}-${BUILD_ID}"
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "build-timestamp=${BUILD_TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "build-id=${BUILD_ID}" >> $GITHUB_OUTPUT
        echo "Production version: ${VERSION}"
        echo "Build timestamp: ${BUILD_TIMESTAMP}"
        echo "Build ID: ${BUILD_ID}"
        
    - name: Generate Auth Key and Build
      shell: pwsh
      env:
        ABUSEIPDB_API_KEY: ${{ secrets.ABUSEIPDB_API_KEY }}
        CLOUDFLARE_RADAR_API_TOKEN: ${{ secrets.CLOUDFLARE_RADAR_API_TOKEN }}
        SkipCodeGeneration: false
        ALBATROSS_ENVIRONMENT: production
      run: |
        # Generate authentication key with environment context
        ./Generate-AuthKey.ps1 -OutputPath "Generated" -Environment "production" -Verbose
        
        # Restore .NET dependencies
        dotnet restore
        
        # Build application (this generates both SPA and Worker files)
        dotnet build --configuration Release --no-restore
        
        # Process worker template with generated constants
        ./Process-Worker.ps1 -TemplateFile "cloudflare-worker.template.js" -OutputFile "cloudflare-worker.js" -ConstantsFile "Generated/build-constants.js"
        
        # Inject production API keys
        if ($env:ABUSEIPDB_API_KEY) {
          (Get-Content cloudflare-worker.js) -replace 'const ABUSEIPDB_API_KEY = "[^"]*"', "const ABUSEIPDB_API_KEY = `"$env:ABUSEIPDB_API_KEY`"" | Set-Content cloudflare-worker.js
          Write-Host "✅ Injected AbuseIPDB API key from GitHub secret (PRODUCTION)"
        } else {
          Write-Warning "⚠️ ABUSEIPDB_API_KEY secret not found - using template default"
        }
        
        if ($env:CLOUDFLARE_RADAR_API_TOKEN) {
          (Get-Content cloudflare-worker.js) -replace 'const CLOUDFLARE_API_TOKEN = "[^"]*"', "const CLOUDFLARE_API_TOKEN = `"$env:CLOUDFLARE_RADAR_API_TOKEN`"" | Set-Content cloudflare-worker.js
          Write-Host "✅ Injected Cloudflare Radar API token from GitHub secret (PRODUCTION)"
        } else {
          Write-Warning "⚠️ CLOUDFLARE_RADAR_API_TOKEN secret not found - using template default"
        }
        
    - name: Publish SPA
      run: |
        dotnet publish Albatross.csproj --configuration Release --no-build --output ./dist
        
    - name: Deploy Worker to Production
      id: worker-deploy
      if: github.event.inputs.deploy_worker != 'false'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Deploy to production environment (use env for production)
        npx wrangler deploy --compatibility-date 2024-06-08 --env production
        
        # Set the production URL
        WORKER_URL="https://abuseipdb.workers.dev"
        echo "url=${WORKER_URL}" >> $GITHUB_OUTPUT
        echo "Production Worker URL: ${WORKER_URL}"
        
    - name: Deploy SPA to Production
      id: spa-deploy
      if: github.event.inputs.deploy_spa != 'false'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Deploy to Cloudflare Pages production slot
        DEPLOYMENT_OUTPUT=$(npx wrangler pages deploy ./dist/wwwroot --project-name ${{ secrets.CLOUDFLARE_PAGES_PROJECT }} --branch=inital)
        
        SPA_URL="https://albatross.devnomadic.com"
        echo "url=${SPA_URL}" >> $GITHUB_OUTPUT
        echo "Production SPA URL: ${SPA_URL}"
        
    - name: Create Release Artifacts
      run: |
        # Create a release package
        mkdir -p release
        cp -r ./dist/wwwroot release/spa
        cp cloudflare-worker.js release/
        cp -r Generated release/
        
        # Create version info
        echo "Version: ${{ steps.version.outputs.version }}" > release/VERSION.txt
        echo "Built: $(date -u)" >> release/VERSION.txt
        echo "SPA URL: ${{ steps.spa-deploy.outputs.url }}" >> release/VERSION.txt
        echo "Worker URL: ${{ steps.worker-deploy.outputs.url }}" >> release/VERSION.txt
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: albatross-production-${{ steps.version.outputs.version }}
        path: release/
        retention-days: 30

  create-github-release:
    name: Create GitHub Release
    needs: build-and-deploy
    runs-on: ubuntu-latest
    #if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: albatross-production-${{ needs.build-and-deploy.outputs.version }}
        path: release/
        
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create tag and release using gh CLI
        TAG_NAME="v${{ needs.build-and-deploy.outputs.version }}"
        RELEASE_NAME="${{ needs.build-and-deploy.outputs.build-timestamp }} (${{ needs.build-and-deploy.outputs.build-id }})"
        DEPLOY_TIME=$(date -u)
        
        # Create release body
        cat > release_body.md << EOF
        ## 🚀 Albatross Production Deployment

        **🌐 SPA URL:** https://albatross.devnomadic.com
        **🔧 Worker URL:** https://abuseipdb.workers.dev
        
        **Deployed from:** \`${{ github.sha }}\`
        **Deployed at:** ${DEPLOY_TIME}
        
        ### Changes
        ${{ github.event.head_commit.message }}
        EOF
        
        # Create the release
        gh release create "${TAG_NAME}" \
          --title "${RELEASE_NAME}" \
          --notes-file release_body.md \
          --target ${{ github.sha }}
        
        # Upload artifacts (excluding sensitive files)
        if [ -d "release" ]; then
          cd release
          
          # Upload individual files (excluding cloudflare-worker.js for security)
          for file in *; do
            if [ -f "$file" ] && [ "$file" != "cloudflare-worker.js" ]; then
              echo "Uploading file: $file"
              gh release upload "${TAG_NAME}" "$file"
            elif [ -f "$file" ] && [ "$file" = "cloudflare-worker.js" ]; then
              echo "Skipping cloudflare-worker.js (contains sensitive data)"
            fi
          done
          
          # Create and upload compressed archives for directories
          for dir in */; do
            if [ -d "$dir" ]; then
              dir_name=${dir%/}  # Remove trailing slash
              echo "Creating archive for directory: $dir_name"
              tar -czf "${dir_name}.tar.gz" "$dir_name"
              echo "Uploading archive: ${dir_name}.tar.gz"
              gh release upload "${TAG_NAME}" "${dir_name}.tar.gz"
            fi
          done
        fi
