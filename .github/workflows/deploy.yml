# Deploy Albatross SPA and Cloudflare Worker
name: Deploy Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'

jobs:
  build-and-deploy-spa:
    name: Build and Deploy SPA
    runs-on: ubuntu-latest
    
    outputs:
      auth-key-b64: ${{ steps.auth-key.outputs.auth-key-b64 }}
      build-id: ${{ steps.auth-key.outputs.build-id }}
      build-timestamp: ${{ steps.auth-key.outputs.build-timestamp }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup PowerShell
      shell: bash
      run: |
        # Ensure PowerShell is available
        if ! command -v pwsh &> /dev/null; then
          echo "Installing PowerShell..."
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.0/powershell_7.4.0-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.0-1.deb_amd64.deb
          sudo apt-get install -f
        fi
        pwsh --version
        
    - name: Generate Authentication Key
      id: auth-key
      run: |
        pwsh -ExecutionPolicy Bypass -File "Generate-AuthKey.ps1" -OutputPath "Generated" -Verbose
        echo "Authentication key generated successfully"
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Update IP manifests
      run: |
        if [ -f "./update-manifests.sh" ]; then
          chmod +x ./update-manifests.sh
          ./update-manifests.sh
        else
          echo "Manifest update script not found, skipping"
        fi
      
    - name: Build application
      run: dotnet build --configuration Release --no-restore
      
    - name: Publish application
      run: dotnet publish --configuration Release --output ./dist --no-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: blazor-app
        path: ./dist/wwwroot/
        retention-days: 30
        
    # Deploy to GitHub Pages (optional)
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist/wwwroot
        force_orphan: true
        
    # Deploy to Cloudflare Pages (alternative to GitHub Pages)
    - name: Deploy to Cloudflare Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
        directory: ./dist/wwwroot
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  deploy-worker:
    name: Deploy Cloudflare Worker
    runs-on: ubuntu-latest
    needs: build-and-deploy-spa
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup PowerShell
      shell: bash
      run: |
        if ! command -v pwsh &> /dev/null; then
          echo "Installing PowerShell..."
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.0/powershell_7.4.0-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.0-1.deb_amd64.deb
          sudo apt-get install -f
        fi
        
    - name: Recreate Authentication Key and Process Worker
      env:
        AUTH_KEY_B64: ${{ needs.build-and-deploy-spa.outputs.auth-key-b64 }}
        BUILD_ID: ${{ needs.build-and-deploy-spa.outputs.build-id }}
        BUILD_TIMESTAMP: ${{ needs.build-and-deploy-spa.outputs.build-timestamp }}
      run: |
        # Recreate the constants file with the generated key
        mkdir -p Generated
        cat > Generated/build-constants.js << EOF
        // <auto-generated />
        // Generated at build time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        // Do not modify this file directly
        
        // Build-time generated authentication key (base64 encoded)
        const GENERATED_AUTH_KEY_B64 = "$AUTH_KEY_B64";
        
        // Decode the authentication key
        const GENERATED_AUTH_KEY = atob(GENERATED_AUTH_KEY_B64);
        
        // Build information
        const BUILD_TIMESTAMP = "$BUILD_TIMESTAMP";
        const BUILD_ID = "$BUILD_ID";
        EOF
        
        # Process the worker template
        pwsh -ExecutionPolicy Bypass -File "Process-Worker.ps1" -TemplateFile "cloudflare-worker.template.js" -OutputFile "cloudflare-worker.js" -ConstantsFile "Generated/build-constants.js" -Verbose
        
    - name: Install Wrangler CLI
      run: npm install -g wrangler
      
    - name: Deploy Worker
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Deploy the worker using wrangler
        wrangler deploy cloudflare-worker.js \
          --name albatross-worker \
          --compatibility-date 2024-01-01
      
    # Alternative: Deploy worker with secrets
    - name: Deploy Worker with Secrets
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Set worker secrets if they exist
        if [ ! -z "${{ secrets.ABUSEIPDB_API_KEY }}" ]; then
          echo "${{ secrets.ABUSEIPDB_API_KEY }}" | wrangler secret put ABUSEIPDB_API_KEY --name albatross-worker
        fi
        
        if [ ! -z "${{ secrets.WORKER_AUTH_KEY }}" ]; then
          echo "${{ secrets.WORKER_AUTH_KEY }}" | wrangler secret put AUTH_KEY --name albatross-worker
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp, javascript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
