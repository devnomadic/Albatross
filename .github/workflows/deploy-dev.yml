# Deploy Albatross to Development/Preview (SPA + Worker)
name: Deploy Dev

on:
  push:
    branches: [ develop, dev, feature/*, fix/* ]
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ develop, main ]
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      deploy_spa:
        description: 'Deploy SPA'
        required: false
        default: true
        type: boolean
      deploy_worker:
        description: 'Deploy Worker'
        required: false
        default: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'

jobs:
  build:
    name: Build Albatross Application
    runs-on: ubuntu-latest
    
    outputs:
      preview-name: ${{ steps.preview.outputs.name }}
      spa-url: ${{ steps.spa-deploy.outputs.url }}
      worker-url: ${{ steps.worker-deploy.outputs.url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install npm dependencies
      run: npm ci
      
    - name: Generate Preview Name
      id: preview
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          PREVIEW_NAME="pr-${{ github.event.number }}"
        else
          BRANCH_NAME="${{ github.ref_name }}"
          PREVIEW_NAME=$(echo "${BRANCH_NAME}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]' | cut -c1-32)
        fi
        echo "name=${PREVIEW_NAME}" >> $GITHUB_OUTPUT
        echo "Preview name: ${PREVIEW_NAME}"
        
    - name: Generate Auth Key and Build
      shell: pwsh
      env:
        ABUSEIPDB_API_KEY: ${{ secrets.ABUSEIPDB_API_KEY_DEV }}
        SkipCodeGeneration: false
      run: |
        # Generate authentication key
        ./Generate-AuthKey.ps1 -OutputPath "Generated" -Verbose
        
        # Restore .NET dependencies
        dotnet restore
        
        # Build application (this generates both SPA and Worker files)
        dotnet build --configuration Release --no-restore
        
        # Process worker template with generated constants
        ./Process-Worker.ps1 -TemplateFile "cloudflare-worker.template.js" -OutputFile "cloudflare-worker.js" -ConstantsFile "Generated/build-constants.js"
        
        # Inject development API key
        if ($env:ABUSEIPDB_API_KEY) {
          (Get-Content cloudflare-worker.js) -replace 'const ABUSEIPDB_API_KEY = "[^"]*"', "const ABUSEIPDB_API_KEY = `"$env:ABUSEIPDB_API_KEY`"" | Set-Content cloudflare-worker.js
          Write-Host "‚úÖ Injected AbuseIPDB API key from GitHub secret (DEV)"
        } else {
          Write-Warning "‚ö†Ô∏è ABUSEIPDB_API_KEY_DEV secret not found - using template default"
        }
        
    - name: Publish SPA
      run: |
        dotnet publish --configuration Release --no-build --output ./dist
        
        # Update base href for preview deployment
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          sed -i 's|<base href="/" />|<base href="/pr-${{ github.event.number }}/" />|g' ./dist/wwwroot/index.html
        fi
        
    - name: Deploy Worker to Preview
      id: worker-deploy
      if: github.event.inputs.deploy_worker != 'false'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Deploy to preview environment of the same worker
        DEPLOYMENT_OUTPUT=$(npx wrangler deploy \
          --compatibility-date 2024-06-08 \
          --env preview 2>&1)
        
        # Extract the worker URL from deployment output
        WORKER_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -oE 'https://[a-zA-Z0-9.-]+\.workers\.dev' | head -1)
        
        if [ -z "$WORKER_URL" ]; then
          # Use the main worker URL with preview parameter
          WORKER_URL="https://abuseipdb.workers.dev?env=preview"
        fi
        
        echo "url=${WORKER_URL}" >> $GITHUB_OUTPUT
        echo "Worker URL: ${WORKER_URL}"
        echo "Environment: preview"
        echo "Note: Same worker, different environment. Access with ?env=preview or via environment variables"
        echo "Deployment output: $DEPLOYMENT_OUTPUT"
        
    - name: Deploy SPA to Cloudflare Pages
      id: spa-deploy
      if: github.event.inputs.deploy_spa != 'false'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Deploy to Cloudflare Pages preview
        DEPLOYMENT_OUTPUT=$(npx wrangler pages deploy ./dist/wwwroot --project-name ${{ secrets.CLOUDFLARE_PAGES_PROJECT }} --branch ${{ steps.preview.outputs.name }})
        
        # Extract the URL from the deployment output
        SPA_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -oE 'https://[a-zA-Z0-9.-]+\.pages\.dev' | head -1)
        
        if [ -z "$SPA_URL" ]; then
          # Fallback URL format
          SPA_URL="https://${{ steps.preview.outputs.name }}.${{ secrets.CLOUDFLARE_PAGES_PROJECT }}.pages.dev"
        fi
        
        echo "url=${SPA_URL}" >> $GITHUB_OUTPUT
        echo "SPA URL: ${SPA_URL}"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: albatross-${{ steps.preview.outputs.name }}
        path: |
          ./dist/wwwroot/
          ./cloudflare-worker.js
          ./Generated/
        retention-days: 7

  update-pr-comment:
    name: Update PR Comment
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Update PR Comment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('üöÄ Albatross Preview')
          );
          
          const workerUrl = '${{ needs.build.outputs.worker-url }}';
          const spaUrl = '${{ needs.build.outputs.spa-url }}';
          
          const commentBody = `## üöÄ Albatross Preview Deployment
          
          **üåê SPA Preview:** ${spaUrl || 'Not deployed'}
          **üîß Worker Preview:** ${workerUrl || 'Not deployed'}
          
          **Environment:** Development/Preview
          **Branch:** \`${{ github.head_ref }}\`
          **Commit:** \`${{ github.sha }}\`
          **Preview Name:** \`${{ needs.build.outputs.preview-name }}\`
          
          This preview will be automatically cleaned up when the PR is merged or closed.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  cleanup-preview:
    name: Cleanup Preview Deployments
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Cleanup Worker Preview
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Note: Using a shared preview worker means no cleanup needed per PR
        # The preview worker will be updated with each new deployment
        echo "Worker preview cleanup: Preview worker managed automatically"
        
    - name: Cleanup Pages Preview
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        # Note: Cloudflare Pages previews are automatically cleaned up
        # but we could add manual cleanup here if needed
        echo "Pages preview cleanup is handled automatically by Cloudflare"
