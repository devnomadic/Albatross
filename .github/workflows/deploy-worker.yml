# Deploy Cloudflare Worker Only
name: Deploy Worker

on:
  push:
    paths:
      - 'cloudflare-worker.template.js'
      - 'wrangler.toml'
      - 'Generate-AuthKey.ps1'
      - 'Process-Worker.ps1'
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy-worker:
    name: Deploy Cloudflare Worker
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Auth Key and Build Worker
      shell: pwsh
      env:
        ABUSEIPDB_API_KEY: ${{ secrets.ABUSEIPDB_API_KEY }}
      run: |
        # Generate authentication key
        ./Generate-AuthKey.ps1
        
        # Process worker template with generated constants and inject API key
        ./Process-Worker.ps1
        
        # Replace the hardcoded API key with the secret
        if ($env:ABUSEIPDB_API_KEY) {
          (Get-Content cloudflare-worker.js) -replace 'const ABUSEIPDB_API_KEY = "[^"]*"', "const ABUSEIPDB_API_KEY = `"$env:ABUSEIPDB_API_KEY`"" | Set-Content cloudflare-worker.js
          Write-Host "✅ Injected AbuseIPDB API key from GitHub secret"
        } else {
          Write-Warning "⚠️ ABUSEIPDB_API_KEY secret not found - using template default"
        }
      
    - name: Deploy Worker to Staging
      if: github.event.inputs.environment == 'staging' || github.ref != 'refs/heads/main'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: npm run deploy:staging
      
    - name: Deploy Worker to Production
      if: github.event.inputs.environment == 'production' || (github.ref == 'refs/heads/main' && github.event.inputs.environment != 'staging')
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: npm run deploy:production
      
    - name: Deployment Summary
      run: |
        echo "## 🚀 Worker Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Worker:** albatross-worker" >> $GITHUB_STEP_SUMMARY
        echo "- **Auth Key:** Auto-generated at build time" >> $GITHUB_STEP_SUMMARY
        echo "- **API Key:** Injected from GitHub secrets" >> $GITHUB_STEP_SUMMARY
